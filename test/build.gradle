plugins {
	id 'java'
	id 'org.springframework.boot' version '3.4.3'
	id 'io.spring.dependency-management' version '1.1.7'
	id 'jacoco'
}

group = 'com.springboot'
version = '0.0.1-SNAPSHOT'

java {
	toolchain {
		languageVersion = JavaLanguageVersion.of(21)
	}
}

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
}

jacoco {
	toolVersion = '0.8.12'
}

jacocoTestReport {
	reports {
		html.required.set(true)
		xml.required.set(false)
		csv.required.set(false)

		html.destination file("$rootDir/jacoco/jacocoHtml")
	}
}

jacocoTestCoverageVerification {
	violationRules {
		rule {
			element = 'BUNDLE'

			limit {
				counter = 'INSTRUCTION'
				value = 'COVEREDRATIO'
				minimum = 0.70
			}
		}

		rule {
			element = 'METHOD'

			limit {
				counter = 'LINE'
				value ='TOTALCOUNT'
				maximum = 50
			}
		}
	}
}
dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	compileOnly 'org.projectlombok:lombok'
	runtimeOnly 'org.mariadb.jdbc:mariadb-java-client'
	annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'
	annotationProcessor 'org.projectlombok:lombok'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
	implementation 'com.google.code.gson:gson'
	testImplementation 'com.h2database:h2'
}

tasks.named('test') {
	useJUnitPlatform()
	jacoco {
		destinationFile = file("$rootDir/jacoco/jacoco.exec")
		excludes = ['**/ProductServiceImpl.class']
	}
}
